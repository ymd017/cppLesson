/*
*
*/

#include <iostream>
#include <windows.h>
#include <sysinfoapi.h>
#include <winuser.h>
using namespace std;

/*============================================================================
* タイマーをスタートし、スタート時のティックカウントを返却する関数
* 引数：なし
* 戻り値：DWORD			スタート時のティックカウント
============================================================================*/
DWORD start() {

	// 変数宣言部
	char startSign;

	// スタートの合図を入力させる
	// 入力がaならティックカウントを返し、その後の処理をする
	// 入力がaでないなら、-1を返し、その後の処理をさせない
	cout << "aを押すと、60分間のタイマーが開始します。\n";
	cin >> startSign;
	if (startSign == 'a') {
		// スタート通知
		cout << "\n学習がスタートしました\n";
		cout << "-------------------------------\n";

		// スタート時のティックカウントを取得して返却する
		return GetTickCount64();
	}
	else {
		return 0;
	}

}


/*============================================================================
* 終了まで、時間を計り、設定時間を超えたら終了フラグを返す関数
* 引数　：DWORD startTime			スタート時のティックカウント
* 戻り値：bool						終了通知フラグ
============================================================================*/
bool measureTime(DWORD startTime) {

	// 変数宣言部
	DWORD currentTime;
	DWORD diff;

	while (true) {
		// 現在のティックカウントを取得する
		currentTime = GetTickCount64();

		// 現在とスタート時のティックカウントの差分を求める
		diff = currentTime - startTime;

		// ティックカウントの差分が60分を超えているか判定する
		// 超えていないなら、現在のティックカウントを取得するところから繰り返す
		//if (diff >= 3600000) {
			//return true;
		//}
		if (diff >= 10000) {
			return true;
		}
		else {
			// 現在の経過時間を表示する
		// cout << (diff / 60000) << "分経過\n";
			cout << (diff / 1000) << "秒経過\n";

			// 1分ごとに判定する
			//Sleep(60000);
			Sleep(5000);
		}
	}
}

/*============================================================================
* 終了通知をする関数
* 引数　：なし
* 戻り値：なし
============================================================================*/
void notifiTheEnd() {
	// 終了通知をする
	cout << "-------------------------------\n";
	cout << "終了\n\n";
	MessageBox(NULL, TEXT("終了しました"), TEXT("終了通知"), MB_OK);
}


int main() {

	while (true) {
		// 変数宣言部
		DWORD startTime = 0;
		bool finished = false;

		// タイマーをスタートし、スタート時のティックカウントを返却する
		startTime = start();

		// startTimeが0ならその後の処理はしない
		if (startTime != 0) {
			// 終了まで、時間を計り、設定時間を超えたら終了フラグを返す
			finished = measureTime(startTime);

			// 終了通知をする
			notifiTheEnd();
		}
	}
}